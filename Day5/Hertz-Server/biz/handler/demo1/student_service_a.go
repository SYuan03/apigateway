// Code generated by hertz generator.

package demo1

import (
	"context"

	demo1 "github.com/SYuan03/Day3/HertzServer/biz/model/demo1"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/SYuan03/Day3/HertzServer/myclient"


	"encoding/json"

	"fmt"
)

// Register .
// @router /add-student-info-A [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req demo1.Student
	err = c.BindAndValidate(&req)
	if err != nil {
		fmt.Println("1111")
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	cli := myclient.GetCli("StudentServiceA")

	// ********
	// case1 创建一个新的http请求，参照官网教程

	// data, err := json.Marshal(req)
	// if err != nil {
	// 	fmt.Println("3333")
	// 	c.String(consts.StatusBadRequest, err.Error())
	// 	return
	// }

	// httpReq, err := http.NewRequest("POST", "http://127.0.0.1:9990/add-student-info-A", bytes.NewBuffer(data))

	// if err != nil {
	// 	fmt.Println("4444")
	// 	c.String(consts.StatusBadRequest, err.Error())
	// 	return
	// }

	// // 将http请求转换为泛型请求
	// customReq, err := generic.FromHTTPRequest(httpReq)

	// if err != nil {
	// 	c.String(consts.StatusBadRequest, err.Error())
	// 	return
	// }


	// log.Println("customReq.Body: ", customReq.Body)
	// log.Println("customReq: ", customReq)

	// resp, err := cli.GenericCall(ctx, "Register", customReq)
	// ********

	// case2 如何把Student类转成json格式的字符串


	// 可以直接使用c.Body()，省得再Marshal一次
	data, err := json.Marshal(req)
	if err != nil {
		fmt.Println("3333")
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	newdata := string(data)

	fmt.Println("newdata: ", newdata)

	// JSON请求
	resp, err := cli.GenericCall(ctx, "Register", newdata)

	if err != nil {
		c.String(consts.StatusBadRequest, "GenericCall Error")
		c.String(consts.StatusBadRequest, err.Error())
		return
	}


	// case1: Http直连泛化
	// realResp := resp.(*generic.HTTPResponse)
	fmt.Println("resp: ", resp)

	// 先把泛化调用的返回值转成json格式的字符串
	jsonStr := resp.(string)
	
	var realResp demo1.RegisterResp

	err = json.Unmarshal([]byte(jsonStr), &realResp)
	if err != nil {
		fmt.Println("5555")
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	c.JSON(consts.StatusOK, realResp)

}

// Query .
// @router /query-A [GET]
func Query(ctx context.Context, c *app.RequestContext) {
	var err error
	var req demo1.QueryReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, "BindAndValidate Error")
		return
	}

	cli := myclient.GetCli("StudentServiceA")

	// ********
	// case1 创建一个新的http请求，参照官网教程
	// httpReq, err := http.NewRequest("GET", fmt.Sprintf("http://127.0.0.1:9990/query-A?id=%d", req.ID), nil)
	// if err != nil {
	// 	c.String(consts.StatusBadRequest, err.Error())
	// 	return
	// }
	// // 将http请求转换为泛型请求
	// customReq, err := generic.FromHTTPRequest(httpReq)
	// if err != nil {
	// 	c.String(consts.StatusBadRequest, err.Error())
	// 	return
	// }
	// // 打印customReq里面的内容

	// resp, err := cli.GenericCall(ctx, "Register", customReq)

	// if err != nil {
	// 	c.String(consts.StatusBadRequest, err.Error())
	// 	return
	// }


	// 可以直接使用c.Body()，省得再Marshal一次
	data, err := json.Marshal(req)
	if err != nil {
		fmt.Println("3333")
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	newdata := string(data)

	fmt.Println("newdata: ", newdata)

	resp, err := cli.GenericCall(ctx, "Query", newdata)

	if err != nil {
		c.String(consts.StatusBadRequest, "GenericCall Error")
		c.String(consts.StatusBadRequest, err.Error())
		return
	}


	jsonStr := resp.(string)
	
	var realResp demo1.Student

	err = json.Unmarshal([]byte(jsonStr), &realResp)
	if err != nil {
		fmt.Println("5555")
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	c.JSON(consts.StatusOK, realResp)
}
