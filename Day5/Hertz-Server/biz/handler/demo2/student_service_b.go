// Code generated by hertz generator.

package demo2

import (
	"context"

	demo2 "github.com/SYuan03/Day3/HertzServer/biz/model/demo2"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/SYuan03/Day3/HertzServer/myclient"

	"log"
	"net/http"
	"bytes"
	"encoding/json"
	"github.com/cloudwego/kitex/pkg/generic"
	"fmt"
)

// Register .
// @router /add-student-info-B [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req demo2.Student
	err = c.BindAndValidate(&req)
	if err != nil {
		fmt.Println("1111")
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	cli := myclient.GetCli("StudentServiceB")


	// 创建一个新的http请求，参照官网教程

	data, err := json.Marshal(req)
	if err != nil {
		fmt.Println("3333")
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	httpReq, err := http.NewRequest("POST", "http://127.0.0.1:9991/add-student-info-B", bytes.NewBuffer(data))

	if err != nil {
		fmt.Println("4444")
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 将http请求转换为泛型请求
	customReq, err := generic.FromHTTPRequest(httpReq)

	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}


	log.Println("customReq.Body: ", customReq.Body)
	log.Println("customReq: ", customReq)

	resp, err := cli.GenericCall(ctx, "Register", customReq)

	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}


	realResp := resp.(*generic.HTTPResponse)

	c.JSON(consts.StatusOK, realResp.Body)

}

// Query .
// @router /query-B [GET]
func Query(ctx context.Context, c *app.RequestContext) {
	var err error
	var req demo2.QueryReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, "BindAndValidate Error")
		return
	}

	cli := myclient.GetCli("StudentServiceB")


	httpReq, err := http.NewRequest("GET", fmt.Sprintf("http://127.0.0.1:9991/query-B?id=%d", req.ID), nil)

	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}


	// 将http请求转换为泛型请求
	customReq, err := generic.FromHTTPRequest(httpReq)

	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 打印customReq里面的内容
	// log.Println("customReq.Body: ", customReq.Body)
	// log.Println("customReq: ", customReq)

	resp, err := cli.GenericCall(ctx, "Register", customReq)

	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	realResp := resp.(*generic.HTTPResponse)

	c.JSON(consts.StatusOK, realResp.Body)
}
