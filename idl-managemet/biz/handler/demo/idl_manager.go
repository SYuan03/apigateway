// Code generated by hertz generator.

package demo

import (
	"context"

	demo "github.com/SYuan03/idlmanage/biz/model/demo"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	_ "fmt"
	"time"

	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

type IdlFile struct {
	ServiceName string
	Version     int32
	Content     string
	CreatedAt   time.Time `gorm:"default:CURRENT_TIMESTAMP"`
}

func (IdlFile) TableName() string {
	return "my_idl_files"
}

var Db *gorm.DB

// 初始化数据库
func InitDB() {
	db, err := gorm.Open(sqlite.Open("idldb.db"), &gorm.Config{})
	if err != nil {
		panic(err)
	}

	// Drop table
	// db.Migrator().DropTable(&IdlFile{})

	// 判断表是否存在
	if !db.Migrator().HasTable(&IdlFile{}) {
		// 不存在则创建
		err = db.Migrator().CreateTable(&IdlFile{})
		if err != nil {
			panic(err)
		}
	}

	Db = db
}

// Add .
// @router /idl/add [POST]
func Add(ctx context.Context, c *app.RequestContext) {
	var err error
	var req demo.AddReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(demo.AddResp)

	// 打印下
	// fmt.Println(req.ServiceName)
	// fmt.Println(req.Version)
	// fmt.Println(req.Content)

	// 将数据写入数据库
	var idlFile *IdlFile
	// 根据服务名和版本号查询
	result := Db.Table("my_idl_files").Where("service_name = ? AND version = ?", req.ServiceName, req.Version).First(&idlFile)

	if result == nil || result.RowsAffected == 0 {
		// 不存在则插入
		idlFile = &IdlFile{
			ServiceName: req.ServiceName,
			Version:     req.Version,
			Content:     req.Content,
		}
		Db.Table("my_idl_files").Create(idlFile)
	} else {
		// 打印
		// fmt.Println("存在!")
		// fmt.Println(idlFile.ServiceName)
		// fmt.Println(idlFile.Version)
		// fmt.Println(idlFile.Content)
		// 存在则报错
		resp.Success = false
		resp.Message = "Add: Record already exists!"
		c.JSON(consts.StatusOK, resp)
		return
	}

	resp.Success = true
	resp.Message = "Added Successfully!"
	c.JSON(consts.StatusOK, resp)
}

// Delete .
// @router /idl/delete [DELETE]
func Delete(ctx context.Context, c *app.RequestContext) {

	var err error
	var req demo.DeleteReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(demo.DeleteResp)

	// 根据服务名和版本号删除
	// 先看看是否存在
	var idlFile *IdlFile
	// 根据服务名和版本号查询
	result := Db.Table("my_idl_files").Where("service_name = ? AND version = ?", req.ServiceName, req.Version).First(&idlFile)
	if result == nil || result.RowsAffected == 0 {
		// 不存在则报错
		resp.Success = false
		resp.Message = "Delete: Record does not exist!"
		c.JSON(consts.StatusOK, resp)
		return
	} else {
		result := Db.Table("my_idl_files").Where("service_name = ? AND version = ?", req.ServiceName, req.Version).Delete(&IdlFile{})
		if result == nil {
			resp.Success = false
			resp.Message = "Failed to delete record: " + result.Error.Error()
			c.JSON(consts.StatusBadRequest, resp)
			return
		} else {
			// 删除
			resp.Success = true
			resp.Message = "Delete Successfully!"
		}
	}
	c.JSON(consts.StatusOK, resp)
}

// Update .
// @router /idl/update [PUT]
func Update(ctx context.Context, c *app.RequestContext) {
	var err error
	var req demo.UpdateReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(demo.UpdateResp)

	// 更新数据库
	var idlFile *IdlFile
	// 根据服务名和版本号查询
	result := Db.Table("my_idl_files").Where("service_name = ? AND version = ?", req.ServiceName, req.Version).First(&idlFile)
	if result == nil || result.RowsAffected == 0 {
		// 不存在则报错
		resp.Success = false
		resp.Message = "Update: Record does not exist!"
	} else {
		// 更新
		resp.Success = true
		resp.Message = "Update Successfully!"
		idlFile.Content = req.Content

		if err := Db.Table("my_idl_files").Where("service_name = ? AND version = ?", req.ServiceName, req.Version).Save(&idlFile).Error; err != nil {
			// 必须要加where条件，否则会报错WHERE conditions required
			// 处理保存时的错误
			resp.Success = false
			resp.Message = "Failed to update record: " + err.Error()
			c.JSON(consts.StatusInternalServerError, resp)
			return
		}
	}
	c.JSON(consts.StatusOK, resp)
}

// Query .
// @router /idl/query [GET]
func Query(ctx context.Context, c *app.RequestContext) {
	var err error
	var req demo.QueryReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(demo.QueryResp)

	// 查询数据库
	var idlFile *IdlFile
	// 根据服务名和版本号查询
	result := Db.Table("my_idl_files").Where("service_name = ? AND version = ?", req.ServiceName, req.Version).First(&idlFile)
	if result == nil || result.RowsAffected == 0 {
		// 不存在则报错
		resp.Success = false
		resp.Message = "Query: Record does not exist!"
		c.JSON(consts.StatusOK, resp)
		return
	} else {
		// 打印
		// fmt.Println("存在!")
		// fmt.Println(idlFile.ServiceName)
		// fmt.Println(idlFile.Version)
		// fmt.Println(idlFile.Content)
		resp.Success = true
		resp.Message = "Query Successfully!"
		resp.Content = idlFile.Content
	}

	c.JSON(consts.StatusOK, resp)
}
