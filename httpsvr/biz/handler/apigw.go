// Code generated by hertz generator.

package handler

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	"fmt"

	"strings"

	myrouting "nju/apigw/routing"
)

// Apigw .
func Apigw(ctx context.Context, c *app.RequestContext) {
	// 获取整个请求的url
	extrainfo := c.Param("extrainfo")

	// 获取请求的url中的参数，先分割
	// 如果超过三项就报错
	// 如果只有两项，那么第一项是ServiceName，第二项是MethodName
	// 不足两项就报错
	// 根据'/'分割

	// 如果有?，那么就是有参数，先分割，否则获取不到正确的MethodName
	sep1 := "?"
	spiltStrByQustionMark := strings.Split(extrainfo, sep1)
	spiltStrWithoutQustionMark := spiltStrByQustionMark[0]

	sep := "/"
	spiltStr := strings.Split(spiltStrWithoutQustionMark, sep)
	//for _, v := range spiltStr {
	//	//fmt.Print(v + " ")
	//}
	if len(spiltStr) > 3 {
		c.JSON(consts.StatusBadRequest, utils.H{
			"message": "Too many parameters!",
		})
		return
	}

	if len(spiltStr) < 2 {
		c.JSON(consts.StatusBadRequest, utils.H{
			"message": "Too few parameters!",
		})
		return
	}

	ServiceName := spiltStr[0]
	MethodName := spiltStr[1]
	var IdlVersion string = "1"
	if len(spiltStr) == 3 {
		IdlVersion = spiltStr[2]
	}

	resp, err := myrouting.ProvideService(ServiceName, MethodName, c, ctx, IdlVersion)

	if err != nil {
		fmt.Println("err in return ProvideService")
		fmt.Println(err.Error())
		fmt.Println("IdlVersion: ", IdlVersion)
		c.JSON(consts.StatusInternalServerError, utils.H{
			"message": err.Error(),
		})
		return
	}

	c.JSON(consts.StatusOK, utils.H{
		"message": "Apigw Success!",
		"resp":    resp,
	})
}
