// Code generated by Kitex v0.6.1. DO NOT EDIT.

package studentservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	demo2 "nju/apigw/kitex_gen/demo2"
)

func serviceInfo() *kitex.ServiceInfo {
	return studentServiceServiceInfo
}

var studentServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "StudentService"
	handlerType := (*demo2.StudentService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Register": kitex.NewMethodInfo(registerHandler, newStudentServiceRegisterArgs, newStudentServiceRegisterResult, false),
		"Query":    kitex.NewMethodInfo(queryHandler, newStudentServiceQueryArgs, newStudentServiceQueryResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "demo2",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.1",
		Extra:           extra,
	}
	return svcInfo
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*demo2.StudentServiceRegisterArgs)
	realResult := result.(*demo2.StudentServiceRegisterResult)
	success, err := handler.(demo2.StudentService).Register(ctx, realArg.Student)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newStudentServiceRegisterArgs() interface{} {
	return demo2.NewStudentServiceRegisterArgs()
}

func newStudentServiceRegisterResult() interface{} {
	return demo2.NewStudentServiceRegisterResult()
}

func queryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*demo2.StudentServiceQueryArgs)
	realResult := result.(*demo2.StudentServiceQueryResult)
	success, err := handler.(demo2.StudentService).Query(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newStudentServiceQueryArgs() interface{} {
	return demo2.NewStudentServiceQueryArgs()
}

func newStudentServiceQueryResult() interface{} {
	return demo2.NewStudentServiceQueryResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Register(ctx context.Context, student *demo2.Student) (r *demo2.RegisterResp, err error) {
	var _args demo2.StudentServiceRegisterArgs
	_args.Student = student
	var _result demo2.StudentServiceRegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Query(ctx context.Context, req *demo2.QueryReq) (r *demo2.Student, err error) {
	var _args demo2.StudentServiceQueryArgs
	_args.Req = req
	var _result demo2.StudentServiceQueryResult
	if err = p.c.Call(ctx, "Query", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
